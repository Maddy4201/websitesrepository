{"name": "test_registration", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_cases.test_register_new_user.Test_Registration object at 0x0000020070D151D0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"68ceb3d10ec5670f7b4673c07a033276\")>\n\n    def test_registration(self, setup):\n    \tself.driver = setup\n    \tself.driver.maximize_window()\n    \tself.driver.get(self.home_page_url)\n    \n    \tself.reg_obj = Register_An_Account(self.driver)\n    \tself.reg_obj.click_sign_up_button()\n    \tself.reg_obj.switch_to_first_signup_window()\n    \tself.reg_obj.enter_full_name(self.full_name)\n    \tself.reg_obj.enter_email_address(self.email_address)\n    \tself.reg_obj.select_country_code(self.country_code)\n    \tself.reg_obj.enter_phone_no(self.phone_no)\n    \tself.reg_obj.enter_new_password(self.new_password)\n    \tself.reg_obj.confirm_sign_up_button()\n    \n    \toriginal_tab = self.driver.current_window_handle\n    \n    \t# # # Open Yopmail in new tab\n    \tself.driver.switch_to.new_window(\"tab\")\n    \tself.yop = Yop_Mail_Page(self.driver)\n    \tself.otp = self.yop.get_otp_from_yopmail()\n    \tprint(\"Fetched OTP: \", self.otp)\n    \n    \t# Close Yopmail tab and switch back to original\n    \tself.driver.close()\n    \tself.driver.switch_to.window(original_tab)\n    \n    \tself.otp_page = Enter_The_OTP(self.driver)\n>   \tself.otp_page.enter_otp(self.otp)\n\ntest_cases\\test_register_new_user.py:52: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase_pages\\registration_otp_page.py:16: in enter_otp\n    otp_inputs = self.wait.until(EC.visibility_of_all_elements_located((By.XPATH, self.otp_field_xpath )))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"68ceb3d10ec5670f7b4673c07a033276\")>\nmethod = <function visibility_of_all_elements_located.<locals>._predicate at 0x0000020070D45DA0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\PythonProject01\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "attachments": [{"name": "log", "source": "f5984a60-84f1-4bdf-8cee-c1456028c927-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "34793a4f-bce2-4419-81ed-e550970856b1-attachment.txt", "type": "text/plain"}], "start": 1744449301600, "stop": 1744449328625, "uuid": "3fdab0ba-16b9-4cb5-802a-f25d5d1ef3a6", "historyId": "b14d9235eb3f2c8cc442243910a6d0dd", "testCaseId": "b14d9235eb3f2c8cc442243910a6d0dd", "fullName": "test_register_new_user.Test_Registration#test_registration", "labels": [{"name": "suite", "value": "test_register_new_user"}, {"name": "subSuite", "value": "Test_Registration"}, {"name": "host", "value": "LAPTOP-G47TJSDB"}, {"name": "thread", "value": "20784-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_register_new_user"}]}