{"name": "test_get_subscription", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-success dashboard-btn btn-block\" style=\"width: 80%; border-radius: 5px\" id=\"show-payment-pop-up\">...</button> is not clickable at point (751, 513). Other element would receive the click: <path d=\"M1280,0L0,0L0,533L1280,533L1280,0Z\n    M689.7396240234375,158.80209350585938 h124.52083587646484 a5,5 0 0 1 5,5 v43.333335876464844 a5,5 0 0 1 -5,5 h-124.52083587646484 a5,5 0 0 1 -5,-5 v-43.333335876464844 a5,5 0 0 1 5,-5 z\" style=\"fill: rgb(0, 0, 0); opacity: 0.7; pointer-events: auto; cursor: auto;\"></path>\n  (Session info: chrome=134.0.6998.178)\nStacktrace:\n\tGetHandleVerifier [0x00007FF65F78DF85+26693]\n\t(No symbol) [0x00007FF65F6EEAD0]\n\t(No symbol) [0x00007FF65F5791CA]\n\t(No symbol) [0x00007FF65F5D75E9]\n\t(No symbol) [0x00007FF65F5D4FA2]\n\t(No symbol) [0x00007FF65F5D2051]\n\t(No symbol) [0x00007FF65F5D0F76]\n\t(No symbol) [0x00007FF65F5C27E4]\n\t(No symbol) [0x00007FF65F5F78EA]\n\t(No symbol) [0x00007FF65F5C2096]\n\t(No symbol) [0x00007FF65F5F7B00]\n\t(No symbol) [0x00007FF65F6200B8]\n\t(No symbol) [0x00007FF65F5F76C3]\n\t(No symbol) [0x00007FF65F5C0490]\n\t(No symbol) [0x00007FF65F5C1743]\n\tGetHandleVerifier [0x00007FF65FAE436D+3525677]\n\tGetHandleVerifier [0x00007FF65FAF7F3B+3606523]\n\tGetHandleVerifier [0x00007FF65FAECEE3+3561379]\n\tGetHandleVerifier [0x00007FF65F857C0A+853194]\n\t(No symbol) [0x00007FF65F6F990F]\n\t(No symbol) [0x00007FF65F6F5674]\n\t(No symbol) [0x00007FF65F6F5816]\n\t(No symbol) [0x00007FF65F6E4D89]\n\tBaseThreadInitThunk [0x00007FFB2A1BE8D7+23]\n\tRtlUserThreadStart [0x00007FFB2ACF14FC+44]", "trace": "self = <test_cases.test_execute_buySubscription.Test_Buy_Subscription object at 0x00000160435A5090>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"855e809293c0bd76a59de78d34d54b0a\")>\n\n    @pytest.mark.order(3)\n    @pytest.mark.sanity\n    def test_get_subscription(self, setup):\n    \tself.logger.info(\"************ Running Test no. 03 *************\")\n    \tself.driver = setup\n    \tself.driver.maximize_window()\n    \tself.driver.get(self.website_url)\n    \tself.buySub_obj = Purchase_Subscription(self.driver)\n    \tself.buySub_obj.enter_username(self.username)\n    \tself.buySub_obj.enter_password(self.password)\n    \tself.buySub_obj.click_login()\n    \tself.logger.info(\"************ Logged in successfully to Buy Subscription *************\")\n    \tself.buySub_obj.click_subscription_button()\n    \tself.buySub_obj.select_yearly_plan()\n    \tself.buySub_obj.click_buy_subscription()\n    \tself.buySub_obj.select_one_year_plan()\n    \tself.buySub_obj.click_buy_button()\n>   \tself.buySub_obj.click_pay_now_button()\n\ntest_cases\\test_execute_buySubscription.py:32: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nbase_pages\\buy_subscription.py:38: in click_pay_now_button\n    self.wait.until(EC.visibility_of_element_located((By.ID, self.pay_now_button_id))).click()\n..\\PythonProject01\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\PythonProject01\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:570: in _execute\n    return self._parent.execute(command, params)\n..\\PythonProject01\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001604360C190>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF65F6E4D89]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB2A1BE8D7+23]\\\\n\\\\tRtlUserThreadStart [0x00007FFB2ACF14FC+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"btn btn-success dashboard-btn btn-block\" style=\"width: 80%; border-radius: 5px\" id=\"show-payment-pop-up\">...</button> is not clickable at point (751, 513). Other element would receive the click: <path d=\"M1280,0L0,0L0,533L1280,533L1280,0Z\nE           M689.7396240234375,158.80209350585938 h124.52083587646484 a5,5 0 0 1 5,5 v43.333335876464844 a5,5 0 0 1 -5,5 h-124.52083587646484 a5,5 0 0 1 -5,-5 v-43.333335876464844 a5,5 0 0 1 5,-5 z\" style=\"fill: rgb(0, 0, 0); opacity: 0.7; pointer-events: auto; cursor: auto;\"></path>\nE         (Session info: chrome=134.0.6998.178)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF65F78DF85+26693]\nE       \t(No symbol) [0x00007FF65F6EEAD0]\nE       \t(No symbol) [0x00007FF65F5791CA]\nE       \t(No symbol) [0x00007FF65F5D75E9]\nE       \t(No symbol) [0x00007FF65F5D4FA2]\nE       \t(No symbol) [0x00007FF65F5D2051]\nE       \t(No symbol) [0x00007FF65F5D0F76]\nE       \t(No symbol) [0x00007FF65F5C27E4]\nE       \t(No symbol) [0x00007FF65F5F78EA]\nE       \t(No symbol) [0x00007FF65F5C2096]\nE       \t(No symbol) [0x00007FF65F5F7B00]\nE       \t(No symbol) [0x00007FF65F6200B8]\nE       \t(No symbol) [0x00007FF65F5F76C3]\nE       \t(No symbol) [0x00007FF65F5C0490]\nE       \t(No symbol) [0x00007FF65F5C1743]\nE       \tGetHandleVerifier [0x00007FF65FAE436D+3525677]\nE       \tGetHandleVerifier [0x00007FF65FAF7F3B+3606523]\nE       \tGetHandleVerifier [0x00007FF65FAECEE3+3561379]\nE       \tGetHandleVerifier [0x00007FF65F857C0A+853194]\nE       \t(No symbol) [0x00007FF65F6F990F]\nE       \t(No symbol) [0x00007FF65F6F5674]\nE       \t(No symbol) [0x00007FF65F6F5816]\nE       \t(No symbol) [0x00007FF65F6E4D89]\nE       \tBaseThreadInitThunk [0x00007FFB2A1BE8D7+23]\nE       \tRtlUserThreadStart [0x00007FFB2ACF14FC+44]\n\n..\\PythonProject01\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "04ed5f82-2f9f-44c4-b956-e6681ada733f-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "eea0f47e-286e-4365-ba65-3efc41403f8d-attachment.txt", "type": "text/plain"}], "start": 1743421633632, "stop": 1743421660626, "uuid": "bfe2343e-b516-4871-9ae1-c05eb4ee50fa", "historyId": "7230920c014816d512213111bd696d17", "testCaseId": "7230920c014816d512213111bd696d17", "fullName": "test_cases.test_execute_buySubscription.Test_Buy_Subscription#test_get_subscription", "labels": [{"name": "tag", "value": "sanity"}, {"name": "tag", "value": "order(3)"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_execute_buySubscription"}, {"name": "subSuite", "value": "Test_Buy_Subscription"}, {"name": "host", "value": "LAPTOP-G47TJSDB"}, {"name": "thread", "value": "20496-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_execute_buySubscription"}]}